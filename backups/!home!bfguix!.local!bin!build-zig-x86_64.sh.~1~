#!/run/current-system/profile/bin/bash
set -euo pipefail

# --- Configuration ---
# This version string MUST match the tarballs you are using.
ZIG_VERSION_TO_BUILD="0.15.0-dev.1274+147a85280" # Ensure this is correct

DOWNLOAD_DIR="${PWD}" # Assumes tarballs are in the current directory when script is run

# Stage1 Compiler (from the official pre-built binary tarball)
STAGE1_TARBALL_NAME="zig-x86_64-linux-${ZIG_VERSION_TO_BUILD}.tar.xz"
STAGE1_EXTRACTION_DIR="${HOME}/Utveckling/Zig/zig_compilers/zig-0.15.0-dev" # Your specified path
STAGE1_ZIG_COMPILER_PATH="${STAGE1_EXTRACTION_DIR}/zig"

# Target Source Code (from the official source tarball)
SOURCE_TARBALL_NAME="zig-${ZIG_VERSION_TO_BUILD}.tar.xz"
SOURCE_EXTRACTION_DIR="${HOME}/Utveckling/Zig/zig_source/zig-0.15.0-dev" # Your specified path

# Installation Prefix for THIS specific "Zig style" build
# Using your requested distinct prefix
FINAL_INSTALL_PREFIX="${HOME}/.local/zig-0.15.0-dev"

# Symlink for this specific built version in ~/.local/bin
# Naming it based on the directory it's installed to for clarity
FINAL_SYMLINK_NAME="zig-0.15.0-dev" # This will become ~/.local/bin/zig-0.15.0-dev
# FINAL_SYMLINK_NAME="zig"
FINAL_SYMLINK_PATH="${HOME}/.local/bin/${FINAL_SYMLINK_NAME}"

# --- Script Arguments ---
REBUILD_ARTIFACTS=false
CHECK=false
OPTIMIZE_LEVEL="ReleaseFast"
ADDITIONAL_ZIG_BUILD_OPTIONS=()
CLEAN_BUILD_CACHE_ONLY=false # Initialize

while [[ $# -gt 0 ]]; do
  case "$1" in
  --check)
    CHECK=true
    shift
    ;;
  --rebuild-artifacts)
    REBUILD_ARTIFACTS=true
    shift
    ;;
  --clean-cache)
    CLEAN_BUILD_CACHE_ONLY=true
    shift
    ;;
  --optimize=*)
    OPTIMIZE_LEVEL="${1#*=}"
    shift
    ;;
  -D*)
    ADDITIONAL_ZIG_BUILD_OPTIONS+=("$1")
    shift
    ;;
  *)
    echo "❌ Unknown option: $1"
    exit 1
    ;;
  esac
done

# --- Preparation & Directory Creation ---
echo "➡️ Preparing 'Zig style' build for Zig version: ${ZIG_VERSION_TO_BUILD}"
echo "   Stage1 Tarball:      ${DOWNLOAD_DIR}/${STAGE1_TARBALL_NAME}"
echo "   Stage1 Extract Dir:  ${STAGE1_EXTRACTION_DIR} (will be created if needed)"
echo "   Source Tarball:      ${DOWNLOAD_DIR}/${SOURCE_TARBALL_NAME}"
echo "   Source Extract Dir:  ${SOURCE_EXTRACTION_DIR} (will be created if needed)"
echo "   Will install to:     ${FINAL_INSTALL_PREFIX} (will be created if needed)"
echo "   Symlink will be:     ${FINAL_SYMLINK_PATH}"

# Check if tarballs exist
if [ ! -f "${DOWNLOAD_DIR}/${STAGE1_TARBALL_NAME}" ]; then
  echo "❌ Stage1 binary tarball not found: ${DOWNLOAD_DIR}/${STAGE1_TARBALL_NAME}"
  exit 1
fi
if [ ! -f "${DOWNLOAD_DIR}/${SOURCE_TARBALL_NAME}" ]; then
  echo "❌ Target source code tarball not found: ${DOWNLOAD_DIR}/${SOURCE_TARBALL_NAME}"
  exit 1
fi

# Handle --rebuild-artifacts
if [ "$REBUILD_ARTIFACTS" = true ]; then
  echo "🗑️  Cleaning previous extractions and install prefix due to --rebuild-artifacts..."
  rm -rf "$STAGE1_EXTRACTION_DIR"
  rm -rf "$SOURCE_EXTRACTION_DIR"
  rm -rf "$FINAL_INSTALL_PREFIX"
fi

# Create extraction and installation directories
mkdir -p "$STAGE1_EXTRACTION_DIR"
mkdir -p "$SOURCE_EXTRACTION_DIR"
mkdir -p "$FINAL_INSTALL_PREFIX"
mkdir -p "$(dirname "$FINAL_SYMLINK_PATH")" # Ensure ~/.local/bin exists

# Extract Stage1 Compiler
if [ ! -f "$STAGE1_ZIG_COMPILER_PATH" ] || [ "$REBUILD_ARTIFACTS" = true ]; then
  echo "📦 Extracting Stage1 compiler to ${STAGE1_EXTRACTION_DIR}..."
  if tar -xf "${DOWNLOAD_DIR}/${STAGE1_TARBALL_NAME}" -C "$STAGE1_EXTRACTION_DIR" --strip-components=1; then
    echo "✅ Stage1 extracted."
  else
    echo "❌ Failed to extract Stage1 tarball."
    exit 1
  fi
fi
if [ ! -x "$STAGE1_ZIG_COMPILER_PATH" ]; then
  echo "❌ Stage1 Zig compiler not found or not executable: $STAGE1_ZIG_COMPILER_PATH"
  exit 1
fi
echo "ℹ️ Using Stage1 Zig ($($STAGE1_ZIG_COMPILER_PATH version)) from: $STAGE1_ZIG_COMPILER_PATH"

# Extract Target Source Code
if [ ! -f "${SOURCE_EXTRACTION_DIR}/build.zig" ] || [ "$REBUILD_ARTIFACTS" = true ]; then
  echo "📦 Extracting Target Source code to ${SOURCE_EXTRACTION_DIR}..."
  if [ "$REBUILD_ARTIFACTS" = true ] && [ -d "$SOURCE_EXTRACTION_DIR" ]; then rm -rf "${SOURCE_EXTRACTION_DIR:?}"/*; fi
  if tar -xf "${DOWNLOAD_DIR}/${SOURCE_TARBALL_NAME}" -C "$SOURCE_EXTRACTION_DIR" --strip-components=1; then
    echo "✅ Target Source extracted."
  else
    echo "❌ Failed to extract Source tarball."
    exit 1
  fi
fi
if [ ! -f "${SOURCE_EXTRACTION_DIR}/build.zig" ]; then
  echo "❌ Target source 'build.zig' not found in: ${SOURCE_EXTRACTION_DIR}"
  exit 1
fi

# --- Navigate to Source Directory ---
cd "$SOURCE_EXTRACTION_DIR"

# --- Optionally Clean Local Build Cache ---
if [ "$REBUILD_ARTIFACTS" = true ] || [ "$CLEAN_BUILD_CACHE_ONLY" = true ]; then
  echo "🗑️  Cleaning local build cache (zig-cache, zig-out)..."
  rm -rf ./zig-cache ./zig-out
fi

# --- Build Zig using 'zig build' ---
echo "🏗  Building Zig ${ZIG_VERSION_TO_BUILD} using 'zig build' method..."

BUILD_ARGS=(
  build
  -p "$FINAL_INSTALL_PREFIX"
  "-Doptimize=${OPTIMIZE_LEVEL}"
  -Dtarget=native
  -Dcpu=native
  -Dstrip
  -Dversion-string=${ZIG_VERSION_TO_BUILD} # Usually not needed for matched official versions
  # -Dccache=true # Uncomment if build.zig supports it and you want it
  "${ADDITIONAL_ZIG_BUILD_OPTIONS[@]}"
)

# Clean the target installation directory before installing THIS build
echo "🧼 Cleaning previous build from installation destination: ${FINAL_INSTALL_PREFIX}"
rm -rf "${FINAL_INSTALL_PREFIX:?}"/*

# Execute the build
echo "🚀 Executing: $STAGE1_ZIG_COMPILER_PATH ${BUILD_ARGS[*]}"
"$STAGE1_ZIG_COMPILER_PATH" "${BUILD_ARGS[@]}"

# --- Post-Install Binary Check ---
REBUILT_ZIG_BIN="${FINAL_INSTALL_PREFIX}/bin/zig"
if [ ! -x "$REBUILT_ZIG_BIN" ]; then
  echo "❌ Zig binary not found after 'zig build' install at: $REBUILT_ZIG_BIN"
  exit 1
fi

# --- Optional Check ---
if [ "$CHECK" = true ]; then
  echo "🔍 Checking newly built Zig version:"
  "$REBUILT_ZIG_BIN" version
fi

# --- Create Specific Symlink in ~/.local/bin ---
echo "🔗 Creating symlink: $FINAL_SYMLINK_PATH -> ${REBUILT_ZIG_BIN}"
ln -sf "$REBUILT_ZIG_BIN" "$FINAL_SYMLINK_PATH"

echo "✅ Zig ${ZIG_VERSION_TO_BUILD} ('Zig style' build) successfully built."
echo "   Version: $($REBUILT_ZIG_BIN version)"
echo "   Installed to: $FINAL_INSTALL_PREFIX"
echo "   Symlink at: $FINAL_SYMLINK_PATH"
echo "🔔 To make this your default system zig, you would manually run:"
echo "   ln -sf \"$REBUILT_ZIG_BIN\" \"${HOME}/.local/bin/zig\""
