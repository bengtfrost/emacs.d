;; -*- lexical-binding: t; -*-

;; --- Performance Optimization (Early Init) ---
;; Increase GC threshold during startup for faster loading
(let ((normal-gc-cons-threshold (* 20 1024 1024))
      (init-gc-cons-threshold (* 128 1024 1024)))
  (setq gc-cons-threshold init-gc-cons-threshold)
  (add-hook 'emacs-startup-hook
            (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))

;; --- Backup File Configuration ---
;; Stop creating backup~ files in the same directory.
;; Instead, put all backup files into a dedicated directory.
(setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory))))
(setq make-backup-files t)               ; Ensure backups are on
(setq backup-by-copying t)               ; Force copying to backup dir, good for version control
(setq delete-old-versions t)             ; Don't clutter backup dir with old versions
(setq kept-new-versions 6)               ; Keep 6 new versions
(setq kept-old-versions 2)               ; Keep 2 old versions
(setq version-control t)                 ; Use version numbers for backups

;; --- Auto-save Configuration ---
(setq auto-save-file-name-transforms
      `((".*" ,(expand-file-name "auto-saves/" user-emacs-directory) t)))

;; Create directories if they don't exist
(let ((backup-dir (expand-file-name "backups" user-emacs-directory))
      (auto-save-dir (expand-file-name "auto-saves" user-emacs-directory)))
  (unless (file-exists-p backup-dir)
    (make-directory backup-dir t))
  (unless (file-exists-p auto-save-dir)
    (make-directory auto-save-dir t)))

;; --- Package Management ---
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

;; Initialize package system
(package-initialize)

;; Bootstrap use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile 
  (require 'use-package))

;; Configure use-package
(setq use-package-always-ensure t)       ; Always ensure packages are installed
(setq use-package-expand-minimally t)    ; Minimize expanded code for performance
(setq use-package-compute-statistics t)  ; Enable statistics for debugging

;; --- Load Custom Configuration Modules ---
;; Load in dependency order: custom -> ui -> keybinds -> langs
(let ((lisp-dir (expand-file-name "lisp" user-emacs-directory)))
  (add-to-list 'load-path lisp-dir)
  
  ;; Ensure directory exists
  (unless (file-exists-p lisp-dir)
    (make-directory lisp-dir t))
  
  ;; Load custom functions first (required by other modules)
  (load-file (expand-file-name "functions.el" lisp-dir))
  
  ;; Load UI configuration
  (load-file (expand-file-name "ui.el" lisp-dir))
  
  ;; Load keybindings (depends on custom functions)
  (load-file (expand-file-name "keybinds.el" lisp-dir))
  
  ;; Load language configuration (depends on everything else)
  (load-file (expand-file-name "langs.el" lisp-dir)))

;; --- Final Configuration ---
(put 'upcase-region 'disabled nil)       ; Enable upcase-region command
(put 'downcase-region 'disabled nil)     ; Enable downcase-region command
(put 'narrow-to-region 'disabled nil)    ; Enable narrow-to-region command

;; --- Custom Variables ---
;; Keep this section clean - most configuration should be in the modules
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages nil))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; --- Startup Message ---
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; --- End of Configuration ---
;; Local Variables:
;; indent-tabs-mode: nil
;; End:
